# Raspberry Pi Geotagging Camera
---
Read this from the bottom up if you're unfamiliar with the project. This document was made more for me than for publication. 
## Structure
3 SD Card partitions:
1. boot: 66.1MB fat16 bootable(lba)
2. system: 4.295GB ext4
3. storage: 27.6GB ext4

Files:
* /etc/fstab contains "/dev/mmcblk0p3  /home/pi/app    ext4    defaults        0       2"
* /etc/rc.local contains "myScript.sh &"
* /usr/local/bin/addGps.py
* /usr/local/bin/gpiotest.sh (optional)
* /usr/local/bin/gpsUTCtime.py
* /usr/local/bin/httpd.py
* /usr/local/bin/myScript.sh
* /usr/local/bin/tmppos.py

Hardware:
* Raspberry Pi 2 Model B V1.1
* RPi camera V2.1 plugged into camera port
* Ribbon cable connected to breakout board/breadboard
* Adafruit Ultimate GPS Breakout v3 connected VIN -> 5V rail, GND -> GND rail, GPS TX -> RPI RXD
* LED connected between IO21 and resistor to GND. 
* Momentary pushbutton connected between 5V and IO5, with pull-down resistor. 
* WLAN adapter (optional, for downloading photos)
* USB Battery Pack and Micro-USB cable for power
Both resistors are BRN-BLK-RED-GOLD. 
You can put a coin cell in the GPS breakout. 

## How it functions
storage partition is mounted at /home/pi/app through fstab. It contains the folder DCIM, the file last.zip, and the file path, which contains, in my case, "DCIM/folder/\n".

There are scripts in /usr/local/bin, which is on the PATH. 

/etc/rc.local contains myScript.sh &

myScript.sh kicks off httpd.py, then sets the time from the gps using gpsUTCtime.py, then starts querying the GPS using tmppos.py. It also traps three signals. 

myScript turns on the LED when the camera is ready. When pin 5 goes high, it turns the LED off, takes a picture with raspistill, adds the position data to the picture with addGps.py, and makes pi the owner. Then it turns the LED back on.gpsUTCtime waits for the GPS to get a fix and then prints out the time, converting it to a standard format. 

tmppos writes the latitude and longitude each on a line in /tmp/position every second. 

addGps uses the position from /tmp/position, the piexif library, and some math to add GPS EXIF data to the file specified in the first argument

httpd.py provides the primary user interface, which mainly consists of directory listings. It contains the entire webserver and its interesting pages, and it takes its files from /home/pi/app, which is the storage partition. It contains code from a variety of sources, none of which received credit. I wrote some cool code that uses SIGUSR1 to tell myScript to update the path to which it saves new images. There is also code that creates a zip file from the current folder. It stores the zip file in /home/pi while generating it, before moving it to /home/pi/app, where it is accessible to the web server. 

6/19/18
I wanted to use the 32GB card for something else, so I set out to save the operating system to a smaller medium. First, I resized the storage partition from 27.6GB to to 1.0GiB=1024MiB. It took longer than expected, but not too long. Then I did "dd if=/dev/sda bs=512 count=10622975 | pv -s 5438963200 > /media/victor/RPiGeotagCam.img" inside of sudo bash to copy everything to a file on an 8GB flash drive. But, that didn't work because the max file size on a fat32 filesystem (what was on the flash drive) is 4GB. Online, someone mentioned network file storage, which prompted me to listen into a file on port 1337 on my computer and do "sudo dd if=/dev/sda bs=512 count=10622975 | pv -s 5438963200 | nc 192.168.1.125 1337" on the linux device with the 32GB card plugged in. It worked. However, I should have just used the adaptor to connect my hard drive to the Pi in the first place. 